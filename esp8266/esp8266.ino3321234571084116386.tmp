#include "RSAAuth.h"                         // Khai báo sử dụng thư viện RSA (Rx = D1, Tx = D 2)
#include <ArduinoJson.h>                     // Khai báo sử dụng thư viện đọc chuỗi Json
#include <ESP8266WiFi.h>
#include <MQTT.h>                            // Khai báo xử dụng thư viện MQTT

#define BAUD_RATE 9600                       // Tốc độ giao tiếp UART 9600 bit/s
// Thông tin về wifi
#define mqtt_ip   "116.118.48.230"            // IP của broker MQTT
#define mqtt_user "doan2"         // Tài khoản đăng nhập broker
#define mqtt_pwd  "doan2"    // Mật khẩu đăng nhập broker
#define ssid      "NhanSgu"                  // ssid của wifi
#define pass      "123456789"                // mật khẩu của wifi
WiFiClient espClient;
MQTTClient  client;

DynamicJsonDocument doc(2048); // Khởi tạo document Jon động với dữ liệu được lưu trong bộ nhớ heap
// trong đề tài này chúng em sử dụng 2kb <=> 2028 byte
// khuyến khích document có kích thước lớn hơn 1kb

/////______Các biến cho việc gửi và nhận______/////
char  cstr[255];
byte  m[255];
byte  buff[255];
int   BEGIN = 0;
int   END = 0;
int   DesLen = 0;
/////______Các biến cho việc gửi và nhận______/////
// Hàm kết nối wifi

void setup_wifi();
void gui (String payload);
void callback(String topic, String payload);
void reconnect();

void setup_wifi()
{
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}
// Hàm call back để nhận dữ liệu
void callback(String topic, String payload)
{
  Serial.print("Co tin nhan moi tu topic:");
  Serial.println(topic);
  for (int i = 0; i < payload.length(); i++) // vòng lặp chạy từ 0-độ dài của chuỗi payload để reset mảng cstr
    cstr[i] = 0;
  payload.toCharArray(cstr, payload.length()+1);    // Chuyển kiểu String qua kiểu *char để gửi qua device điều khiển thiết bị
  yield();                                        // Delay một khoản thời gian rất ngắn
  rsa.Send(cstr);                                 // Gửi chuỗi cstr qua device
  Serial.println("-Gui:");
  Serial.println((char*)cstr);

}

// Hàm reconnect thực hiện kết nối lại khi mất kết nối với MQTT Broker
void reconnect()
{
  while (!client.connected()) // Chờ tới khi kết nối
  {
    // Thực hiện kết nối với mqtt user và pass
    if (client.connect("ESP8266Client", mqtt_user, mqtt_pwd)) //kết nối vào broker
    {
      Serial.println("Đã kết nối:");
      client.subscribe("IoT47_MQTT_Test"); //đăng kí nhận dữ liệu từ topic IoT47_MQTT_Test
    }
    else
    {
      Serial.print("Lỗi:, rc=");
      Serial.println("Thu lai sau 5s");
      // Đợi 5s
      delay(5000);
    }
  }
}

void gui (String payload) {
  for (int i = 0; i < payload.length(); i++) // vòng lặp chạy từ 0-độ dài của chuỗi payload để reset mảng cstr
    cstr[i] = 0;
  payload.toCharArray(cstr, payload.length() + 1);
  yield();                                        // Delay một khoản thời gian rất ngắn
  rsa.Send(cstr);
}
void setup()
{
  Serial.begin(BAUD_RATE);    // Tốc độ giao tiếp với máy tính
  swSer.begin(BAUD_RATE);     // Tốc độ giao tiếp UART giữa 2 esp BAUD_RATE bit/s
  setup_wifi();
  client.begin(mqtt_ip, espClient);      // Cấu hình ib của broker thông qua mạng wifi để kết nối vào broker
  client.onMessage(callback);            // Mỗi lần app pub một gói tin thì hàm này sẽ nhận và gọi hàm callback để xử lý
  reconnect();                           // Kết nối vào broker
}

void loop()
{
  if (!client.connected())// Kiểm tra kết nối
    reconnect();
  client.loop();
  DesLen = 0;
  if (rsa.Receive(buff, &BEGIN, &END, m, &DesLen)) // Nếu có dữ liệu từ device truyền qua
    // Nó sẽ kiểm tra dữ liệu nhận được đúng với dữ liệu mà device truyền qua
    // thì thực hiện pub lên broker
  {
    if (DesLen > 0)
    {
      client.publish("IoT47_MQTT_Test", "Xin chao !"); // gửi dữ liệu lên topic IoT47_MQTT_Test
    }
  }
  else Serial.println("Nhan error:");

}
